_envops:
  lstrip_blocks: true
  trim_blocks: true

_subdirectory: template

_skip_if_exists:
  - CHANGELOG.md
  - docs/insiders/changelog.md

_jinja_extensions:
  - copier_templates_extensions.TemplateExtensionLoader
  - extensions.py:CurrentYearExtension
  - extensions.py:GitConfigExtension
  - extensions.py:SlugifyExtension
  - extensions.py:CodingCaseExtension
  - extensions.py:EmailValidationExtension
  - extensions.py:PackageNameExtension
  - extensions.py:SemverExtension

# === Messages ===
_message_before_copy: |
  Thanks for generating a project using our template.

  You'll be asked a series of questions whose answers will be used to
  generate a tailored project for you.
_message_after_copy: |
  Your project "{{ project_name }}" has been created successfully!
_message_before_update: |
  Thanks for updating your project using our template.

  You'll be asked a series of questions whose answers are pre-populated
  with previously entered values. Feel free to change them as needed.
_message_after_update: |
  Your project "{{ project_name }}" has been updated successfully!
  In case there are any conflicts, please resolve them. Then,
  you're done.

# === Project ===
project_name:
  type: str
  placeholder: MyAwesomeProject
  help: "Enter the name of the project:"
  validator: >-
    {% if not project_name.strip() %}
    ERROR: Must not be empty
    {% endif %}

project_description:
  type: str
  placeholder: "{{ project_name }} is an awesome python project that also makes coffee â˜•"
  help: "Provide a concise description to be used in the Python package overview and the introductory paragraph in the README and documentation's index page:"
project_keywords:
  type: str
  default: "python,{{ project_name | lower }}"
  help: "Provide a list of comma-separated keywords to be using in the Python package overview:"
development_status:
  type: str
  default: Alpha
  choices:
    - Alpha
    - Beta
    - Production/Stable
  help: "Choose the development status:"

copyright_license:
  type: str
  default: MIT License
  choices:
    - Apache Software License
    - Boost Software License 1.0 (BSL-1.0)
    - GNU Affero General Public License v3
    - GNU General Public License v3 (GPLv3)
    - GNU Lesser General Public License v3 (LGPLv3)
    - MIT License
    - Mozilla Public License 2.0 (MPL 2.0)
    - The Unlicense (Unlicense)
  help: Choose the project's license (e.g. "MIT", "GPL-3.0").
copyright_year:
  type: str
  default: "{{ CURRENT_YEAR }}"
  help: Enter the copyright year or range (e.g. "2022-2023").
  validator: >-
    {% if not copyright_year.strip() %}
    ERROR: Must not be empty
    {% endif %}

# === Author ===
author_fullname:
  type: str
  help: "Specify the full name of the author:"
  default: "{{ 'John Doe' | git_user_name }}"
  validator: >-
    {% if not author_fullname.strip() %}
    ERROR: Must not be empty
    {% endif %}
author_username:
  type: str
  default: "{{ author_fullname | git_user_name }}"
  help: "Specify the username of the author:"
  validator: >-
    {% if not author_username.strip() %}
    ERROR: Must not be empty
    {% endif %}
author_email:
  type: str
  default: '{{  {{ author_name | lower | replace(" ", ".") }}@{{ organization_name | lower | replace(" ", "-") }}.com | git_user_email }}'
  help: "Specify the email address of the author:"
  validator: >-
    {% if not author_email | is_valid_email %}
    ERROR: Must be a valid email address (e.g., johndoe@example.com)
    {% endif %}
organization_name:
  type: str
  default: "{{ author_fullname }}"
  help: "Provide the name of the organization associated with the project:"
  validator: >-
    {% if not organization_name.strip() %}
    ERROR: Must not be empty
    {% endif %}
copyright_holder:
  type: str
  default: "{{ organization_name }}"
  help: Name(s) or organization(s) holding the copyright.
  validator: >-
    {% if not copyright_holder.strip() %}
    ERROR: Must not be empty
    {% endif %}

# === Repository ===
repo_platform:
  type: str
  default: github
  choices:
    GitHub: github
    GitLab: gitlab
    GitLab (self-managed): gitlab-self-managed
  help: "Choose the platform for the repository:"
repo_host:
  type: str
  default: |-
    {% if repo_platform == 'github' %}
    github.com
    {%- elif repo_platform == 'gitlab' %}
    gitlab.com
    {%- endif %}
  help: "Specify the host of the self-managed GitLab:"
  when: '{{ repo_platform == "gitlab-self-managed" }}'
page_host:
  type: str
  default: |-
    {% if repo_platform == 'github' %}
    github.io
    {%- elif repo_platform == 'gitlab' %}
    gitlab.io
    {%- endif %}
  help: "Specify the host of the self-managed GitLab Pages:"
  when: '{{ repo_platform == "gitlab-self-managed" }}'
container_registry_host:
  type: str
  default: |-
    {% if repo_platform == 'github' %}
    ghcr.io
    {%- elif repo_platform == 'gitlab' %}
    registry.gitlab.com
    {%- endif %}
  help: "Specify the host of the self-managed GitLab Container Registry:"
  when: '{{ repo_platform == "gitlab-self-managed" }}'

repo_namespace: # TODO: Check if it's ok to have spaces
  type: str
  default: "{{ organization_name | slugify('-') | git_user_name }}"
  help: "Indicate the GitHub Repository Owner or GitLab Namespace. This is typically the account name of the author or the organization:"
  validator: >-
    {% if not repo_namespace.strip() %}
    ERROR: Must not be empty
    {% endif %}
repo_name: # TODO: Check if it's ok to have spaces (enforce normalized names)
  type: str
  default: "{{ project_name | slugify('-') }}"
  help: "Provide a name for the repository:"
  validator: >-
    {% if not repo_name.strip() %}
    ERROR: Must not be empty
    {% endif %}

# === Normalized names ===
# {# djlint:off H025 #}
package_name:
  type: str
  default: '{{ repo_name | lower | regex_replace("-python$", "") }}'
  help: 'Specify the name of the distributable package for the project (often used in "pip install <package_name>"):'
  validator: >-
    {% if not package_name | is_normalized_package_name %}
    ERROR: You should use be a normalized (kebab-case) package name (e.g., 'my-awesome-project')
    see https://packaging.python.org/en/latest/specifications/name-normalization/#name-normalization
    {% endif %}
module_name:
  type: str
  default: '{{ package_name | replace("-", "_") }}'
  help: 'Specify the name of the primary module within the package (often used in "import <module_name>"):'
  validator: >-
    {% if not module_name | is_snake_case %}
    ERROR: Must be in snake_case (e.g., 'my_awesome_project')!
    {% endif %}
cli_name:
  type: str
  default: "{{ package_name }}"
  help: "Specify the name of the CLI tool:"
  validator: >-
    {% if not cli_name | is_kebab_case %}
    ERROR: Must be in kebab_case (e.g., 'my-awesome-project')!
    {% endif %}
  # {# djlint:on #}

coverage_threshold:
  type: int
  default: 80
  help: "Set the threshold for test coverage, ranging from 0 to 100:"
  validator: >-
    {% if not 0 <= coverage_threshold <= 100 %}Test Coverage threshold should be between 0 and 100{% endif %}
platforms:
  type: str
  default: ["macos", "linux", "windows"]
  choices:
    - macos
    - linux
    - windows
  help: "Set the supported platforms for the project:"
  multiselect: true

# === Python versions ===
python_versions: # Computed
  default: ["3.9", "3.10", "3.11", "3.12", "3.13", "3.14"]
  when: false
min_py:
  type: str
  default: "3.12"
  choices: "{{ python_versions }}"
  help: "Choose the minimal Python version the project should support:"
max_py:
  type: str
  default: "3.14"
  help: "Choose the maximal Python version the project should support:"
  choices: |
    {% for version in python_versions %}
      {% if version | version_higher_than(min_py) %}
    - "{{ version }}"
      {% endif %}
    {% endfor %}
default_py:
  type: str
  default: "{{ max_py }}"
  help: "Choose the default Python version for development, documentation generation, and package build:"
  choices: |
    {% for version in python_versions %}
      {% if version | version_between(min_py, max_py) %}
    - "{{ version }}"
      {% endif %}
    {% endfor %}
