# See specifications: https://packaging.python.org/en/latest/specifications/pyproject-toml/
[project]
dynamic = ["version", "authors", "urls"]
name = "{{ package_name }}"
description = "{{ project_description }}"
requires-python = ">={{ min_python_version }}"
keywords = [
{% set keywords = (project_keywords.split(",") | map("trim") | list) %}
{% for keyword in keywords %}
    "{{ keyword }}",
{% endfor %}
]
readme = "README.md"
license = "{{ copyright_license }}"
license-files = ["LICENSE*"]

# List of classifiers: https://pypi.org/classifiers/
classifiers = [
{% if project_version.startswith("0.") %}
    "Development Status :: 2 - Pre-Alpha",
{% else %}
    "Development Status :: 5 - Production/Stable",
{% endif %}
{% if "macos" in platforms %}
    "Operating System :: MacOS :: MacOS X",
{% endif %}
{% if "windows" in platforms %}
    "Operating System :: Microsoft :: Windows",
{% endif %}
{% if "linux" in platforms %}
    "Operating System :: POSIX :: Linux",
{% endif %}
{% if "macos" in platforms and "windows" in platforms and "linux" in platforms %}
    "Operating System :: OS Independent",
{% endif %}
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
{% for version in python_versions %}
    {% if version | version_between(min_python_version, max_python_version) %}
    "Programming Language :: Python :: {{ version }}",
    {% endif %}
{% endfor %}
]

dependencies = []

[dependency-groups]
dev = ["hatchling"]

# https://packaging.python.org/en/latest/guides/writing-pyproject-toml/#creating-executable-scripts
[project.scripts]
{{ cli_name }} = "{{ module_name }}:main_cli"


# === Build ===
[build-system]
requires = ["hatchling", "uv-dynamic-versioning"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "uv-dynamic-versioning"
[tool.hatch.build.hooks.version]
path = "src/{{ module_name }}/__about__.py"
pattern = true
# see: https://github.com/ninoseki/uv-dynamic-versioning/blob/main/docs/tips.md
[tool.uv-dynamic-versioning]
fallback-version = "0.0.0"
[tool.hatch.metadata.hooks.custom] # Enables custom hooks for dynamic metadata


# === Tools ===
[tool.ruff] # https://docs.astral.sh/ruff/settings
fix = true
preview = true
target-version = "py312"
line-length = 100
extend-include = ["*.ipynb"]
    [tool.ruff.format]
    preview = true
    docstring-code-format = true

    [tool.ruff.lint]
    preview = true
    pydocstyle.convention = "google"
    flake8-annotations.mypy-init-return = true
    logger-objects = ["loguru.logger"]
    select = ["ALL"]

    ignore = [
        # === Rules incompatible with Ruff formatter  ===
        "W191",   # tab-indentation
        "E111",   # indentation-with-invalid-multiple
        "E114",   # indentation-with-invalid-multiple-comment
        "E117",   # over-indented
        "D206",   # docstring-tab-indentation
        "D300",   # triple-single-quotes
        "Q000",   # bad-quotes-inline-string
        "Q001",   # bad-quotes-multiline-string
        "Q002",   # bad-quotes-docstring
        "Q003",   # avoidable-escaped-quote
        "COM812", # missing-trailing-comma
        "COM819", # prohibited-trailing-comma
        "ISC002", # multi-line-implicit-string-concatenation
        "W291",   # trailing whitespace
        "W293",
        "E271",

        # === Convenience ===
        "CPY001", # Copyright notice at top of file
        "ISC001", # Checks for implicitly concatenated strings on a single line. -- Should not be used with formatter
        "D105",   # Missing docstring in magic method
        "D107",   # Missing docstring in `__init__`
        "D212",   # Multi-line docstring summary should start at the first line
        "TD002",  # Missing author in TODO; try: `TODO(<author_name>): ...` or `TODO @<author_name>: ...`
        "TD003",  # Missing issue link on the line following this TODO
        "TD004",  # Missing colon after TODO
        "ANN401", # Dynamically typed expressions (typing.Any) are disallowed in
        "RET504", # Unnecessary assignment to `...` before `return` statement

        # TODO: Comment out for production release
        "ERA001", # Found commented-out code
        "S101",   # Use of `assert` detected
        "G004",   # Logging statement uses f-string

        # TODO: Uncomment to check docs
        "DOC201", # No return in docs
    ]
        [tool.ruff.lint.per-file-ignores]
        "tests/*" = [
            "INP001",
            "SLF001",  # Private member accessed: `self._foo`
            "D100",    # Missing docstring in public module
            "D101",    # Missing docstring in public class
            "D102",    # Missing docstring in public method
            "D103",    # Missing docstring in public function
            "PLR6301", # Method `` could be a function, class method, or static method
            "PLR2004", # Magic value used in comparison, consider replacing `` with a constant variable
            "ANN",
        ]
        "*.ipynb" = [
            "D101", # Missing docstring in public class
            "D103", # Missing docstring in public function
        ]
        "dev/_*" = [
            "D103", # Missing docstring in public function
        ]

        [tool.ruff.lint.flake8-import-conventions.extend-aliases]
        "typed_settings" = "ts"
